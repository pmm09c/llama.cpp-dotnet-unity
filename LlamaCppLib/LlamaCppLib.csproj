<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.1</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<BaseOutputPath>..</BaseOutputPath>
		<LangVersion>latest</LangVersion>
		<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
		<AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<DefineConstants Condition="$([MSBuild]::IsOSPlatform('Windows'))">WINDOWS</DefineConstants>
		<DefineConstants Condition="$([MSBuild]::IsOSPlatform('Linux'))">LINUX</DefineConstants>
		<DefineConstants Condition="$([MSBuild]::IsOSPlatform('OSX'))">MACOS</DefineConstants>
	</PropertyGroup>

	<ItemGroup>
	  <PackageReference Include="System.Buffers" Version="4.5.1" />
	  <PackageReference Include="System.Text.Json" Version="7.0.3" />
	</ItemGroup>

	<Target Name="CMakePrepareForBuild" BeforeTargets="PrepareForBuild;Clean" Condition="'$(NativeLibraries)'!='OFF'">
		<PropertyGroup Condition="'$(OS)' == 'Windows_NT'">
			<Test>$(VsInstallRoot)</Test>
			<CMakeBin Condition="Exists('$(Test)')">"$(VsInstallRoot)\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"</CMakeBin>
			<CMakeBin Condition="!Exists('$(Test)')">"$([System.IO.Path]::GetFullPath('$(VS170COMNTOOLS)\..\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe'))"</CMakeBin>
		</PropertyGroup>
		<PropertyGroup Condition="'$(OS)' != 'Windows_NT'">
			<CMakeBin>cmake</CMakeBin>
		</PropertyGroup>
		<PropertyGroup>
			<CMakeProject>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\..\llama.cpp'))</CMakeProject>
		</PropertyGroup>
	</Target>

	<Target Name="CMakeConfigure" BeforeTargets="Build" Condition="'$(NativeLibraries)'!='OFF'">
		<PropertyGroup>
			<CMakeCompilerFlags Condition="'$(OS)' == 'Windows_NT'">-DCMAKE_CXX_FLAGS="/W0 /EHsc /w /D _MBCS" -DCMAKE_C_FLAGS="/W0 /w"</CMakeCompilerFlags>
			<CMakeCompilerFlags Condition="$([System.String]::new('$(OS)').StartsWith('Unix'))">-DCMAKE_CXX_FLAGS=-w -DCMAKE_C_FLAGS=-w</CMakeCompilerFlags>
		</PropertyGroup>
		<!-- https://github.com/ggerganov/llama.cpp/pull/1827#issuecomment-1588722643 -->
		<Exec Command="$(CMakeBin) -DLLAMA_CUBLAS=ON -DLLAMA_CUDA_FORCE_DMMV=ON -DLLAMA_CUDA_DMMV_X=64 -DLLAMA_CUDA_MMV_Y=2 -DLLAMA_ALL_WARNINGS=OFF -DLLAMA_BUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON -S &quot;$(CMakeProject)&quot; -B &quot;$(CMakeProject)&quot; $(CMakeCompilerFlags)" />
	</Target>

	<Target Name="CMakeBuild" AfterTargets="CMakeConfigure" Condition="'$(NativeLibraries)'!='OFF'">
		<Exec Command="$(CMakeBin) --build &quot;$(CMakeProject)&quot; -j8 --config $(Configuration)" />
	</Target>

	<Target Name="CMakeCopyOutput" AfterTargets="CMakeBuild" Condition="'$(NativeLibraries)'!='OFF'">
		<PropertyGroup>
			<LibraryFileExtension Condition="'$(OS)' == 'Windows_NT'">*.dll</LibraryFileExtension>
			<LibraryFileExtension Condition="$([System.String]::new('$(OS)').StartsWith('Unix'))">lib*.so</LibraryFileExtension>
		</PropertyGroup>
		<ItemGroup>
			<LibraryFiles Include="$(CMakeProject)/bin/$(Configuration)/$(LibraryFileExtension)" />
			<LibraryFiles Include="$(CMakeProject)/$(LibraryFileExtension)" />
		</ItemGroup>
		<Copy SourceFiles="@(LibraryFiles)" DestinationFolder="$(SolutionDir)/$(Configuration)/$(MSBuildProjectName)" />
	</Target>

</Project>
